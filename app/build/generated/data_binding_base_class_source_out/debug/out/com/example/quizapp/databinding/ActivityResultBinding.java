// Generated by view binder compiler. Do not edit!
package com.example.quizapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.quizapp.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityResultBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final MaterialButton btnHome;

  @NonNull
  public final MaterialButton btnRetry;

  @NonNull
  public final MaterialButton btnShare;

  @NonNull
  public final LinearLayout buttonContainer;

  @NonNull
  public final CardView cardResult;

  @NonNull
  public final MaterialCardView cardScore;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView tvCongratulations;

  @NonNull
  public final TextView tvCorrectAnswers;

  @NonNull
  public final TextView tvIncorrectAnswers;

  @NonNull
  public final TextView tvScore;

  @NonNull
  public final TextView tvTimeTaken;

  private ActivityResultBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull MaterialButton btnHome,
      @NonNull MaterialButton btnRetry, @NonNull MaterialButton btnShare,
      @NonNull LinearLayout buttonContainer, @NonNull CardView cardResult,
      @NonNull MaterialCardView cardScore, @NonNull MaterialToolbar toolbar,
      @NonNull TextView tvCongratulations, @NonNull TextView tvCorrectAnswers,
      @NonNull TextView tvIncorrectAnswers, @NonNull TextView tvScore,
      @NonNull TextView tvTimeTaken) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.btnHome = btnHome;
    this.btnRetry = btnRetry;
    this.btnShare = btnShare;
    this.buttonContainer = buttonContainer;
    this.cardResult = cardResult;
    this.cardScore = cardScore;
    this.toolbar = toolbar;
    this.tvCongratulations = tvCongratulations;
    this.tvCorrectAnswers = tvCorrectAnswers;
    this.tvIncorrectAnswers = tvIncorrectAnswers;
    this.tvScore = tvScore;
    this.tvTimeTaken = tvTimeTaken;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityResultBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityResultBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_result, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityResultBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.btnHome;
      MaterialButton btnHome = ViewBindings.findChildViewById(rootView, id);
      if (btnHome == null) {
        break missingId;
      }

      id = R.id.btnRetry;
      MaterialButton btnRetry = ViewBindings.findChildViewById(rootView, id);
      if (btnRetry == null) {
        break missingId;
      }

      id = R.id.btnShare;
      MaterialButton btnShare = ViewBindings.findChildViewById(rootView, id);
      if (btnShare == null) {
        break missingId;
      }

      id = R.id.buttonContainer;
      LinearLayout buttonContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonContainer == null) {
        break missingId;
      }

      id = R.id.cardResult;
      CardView cardResult = ViewBindings.findChildViewById(rootView, id);
      if (cardResult == null) {
        break missingId;
      }

      id = R.id.cardScore;
      MaterialCardView cardScore = ViewBindings.findChildViewById(rootView, id);
      if (cardScore == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvCongratulations;
      TextView tvCongratulations = ViewBindings.findChildViewById(rootView, id);
      if (tvCongratulations == null) {
        break missingId;
      }

      id = R.id.tvCorrectAnswers;
      TextView tvCorrectAnswers = ViewBindings.findChildViewById(rootView, id);
      if (tvCorrectAnswers == null) {
        break missingId;
      }

      id = R.id.tvIncorrectAnswers;
      TextView tvIncorrectAnswers = ViewBindings.findChildViewById(rootView, id);
      if (tvIncorrectAnswers == null) {
        break missingId;
      }

      id = R.id.tvScore;
      TextView tvScore = ViewBindings.findChildViewById(rootView, id);
      if (tvScore == null) {
        break missingId;
      }

      id = R.id.tvTimeTaken;
      TextView tvTimeTaken = ViewBindings.findChildViewById(rootView, id);
      if (tvTimeTaken == null) {
        break missingId;
      }

      return new ActivityResultBinding((ConstraintLayout) rootView, appBarLayout, btnHome, btnRetry,
          btnShare, buttonContainer, cardResult, cardScore, toolbar, tvCongratulations,
          tvCorrectAnswers, tvIncorrectAnswers, tvScore, tvTimeTaken);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
